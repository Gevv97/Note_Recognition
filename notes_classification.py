# -*- coding: utf-8 -*-
"""notes_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rVmrz0GKWwejOcYX_TvmIuN5PIuQMKiN

Load Packages
"""

import pandas as pd
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets,layers,models
import numpy as np
from os import listdir
from sklearn.model_selection  import train_test_split
from google.colab import drive
drive.mount('/content/drive/')

dataset_path='drive//MyDrive//nnn//' 

model_path='notes_classification'

classes=['whole','half']

def preprocesssing(img):    
    img=cv2.resize(img,(224,224))
    img=keras.applications.mobilenet.preprocess_input(img)
    return img

lst1=[]
lst2=[]
for i in listdir(dataset_path):
    for j in listdir(dataset_path+i+'//'):
        lst1.append(preprocesssing((cv2.imread(dataset_path+i+'//'+j))))
        lst2.append(i)
        
for i in range(0,len(lst2)):
    if lst2[i]=='whole':
        lst2[i]=0
    elif lst2[i]=='half':
        lst2[i]=1
    
    else:
        print('error')



x_train, X, y_train, Y = train_test_split(np.array(lst1), np.array(lst2), test_size=0.25)
x_val, x_test, y_val,y_test = train_test_split(X,Y, test_size=0.25)
y_train=tf.keras.utils.to_categorical(y_train, num_classes=2)
y_val=tf.keras.utils.to_categorical(y_val, num_classes=2)
y_test=tf.keras.utils.to_categorical(y_test,num_classes=2)

cnn=models.Sequential([
    
    layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(224,224,3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),
    
    layers.Flatten(),
    layers.Dense(64,activation='relu'),
    layers.Dense(2,activation='softmax')
    
])


cnn.compile(optimizer='adam',
            loss='categorical_crossentropy',
            metrics=['accuracy'])

#this part is slow
cnn.fit(x_train,y_train,validation_data = (x_val, y_val),epochs=5)

cnn.save(model_path)

cnn=tf.keras.models.load_model(model_path)

cnn.evaluate(x_test,y_test)

def predict(img_path):
    img=cv2.imread(img_path)
    img=preprocesssing(img)
    img=np.expand_dims(img, axis=0)
    x=np.argmax(cnn.predict(img))
    return classes[x]

testWhitePath='drive//MyDrive//nnnn//'
testImages=[]
for i in listdir(testWhitePath):
    testImages.append(i)

[predict(testWhitePath+image) for image in testImages]



testBlackPath='test\\\\'
testImages=[]
for i in listdir(testBlackPath):
    testImages.append(i)

[predict(testBlackPath+image) for image in testImages]





